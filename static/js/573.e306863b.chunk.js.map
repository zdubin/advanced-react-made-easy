{"version":3,"file":"static/js/573.e306863b.chunk.js","mappings":"2KA+CA,UAtCsD,SAAHA,GAAgE,IAADC,EAAAD,EAAzDE,aAAAA,OAAY,IAAAD,EAAG,EAACA,EACrEE,GAA8BC,EAAAA,EAAAA,UAAiBF,GAAaG,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArDI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,GAA0BC,EAAAA,EAAAA,YAAqBC,EAAAA,IAAvCC,EAAIH,EAAJG,KAAMC,EAAOJ,EAAPI,QAORC,GAAkBC,EAAAA,EAAAA,cAAY,WAChCP,GAAW,SAACQ,GAAY,OAAKA,EAAO,CAAC,GAEzC,GAAG,IAEGC,GAAyBF,EAAAA,EAAAA,cAAY,WAEvCG,YAAW,kBAAMV,GAAW,SAACQ,GAAY,OAAKA,EAAO,CAAC,GAAC,GAAE,IAE7D,GAAG,IAEH,OACIG,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAA,cAAAE,OAAmBf,MACnBc,EAAAA,EAAAA,KAAA,MAAAD,SAAA,uBAAAE,OAA4BV,MAC5BS,EAAAA,EAAAA,KAAA,QAAME,UAAU,eAAcH,UAC1BC,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAACC,QAAQ,WAAWC,QAASZ,EAAgBM,SAAC,yBAGzDC,EAAAA,EAAAA,KAAA,QAAME,UAAU,eAAcH,UAC1BC,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAACC,QAAQ,YAAYC,QAAST,EAAuBG,SAAC,yBAGjEC,EAAAA,EAAAA,KAAA,QAAME,UAAU,eAAcH,UAC1BC,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAACC,QAAQ,WAAWC,QAAS,kBA7B5BC,EA6B6C,GAADL,OAAIV,GAAIU,OAAGf,QA5BnEM,GACAA,EAAQc,IAFG,IAACA,CA6BiE,EAACP,SAAC,oBAI3F,C","sources":["CounterExample/CounterExample.tsx"],"sourcesContent":["import { useCallback, useState, useContext } from \"react\";\r\nimport React from 'react';\r\nimport { UserType } from '../AppTypes/AppTypes';\r\nimport { UserContext } from \"../App\";\r\nimport Button from '@mui/material/Button';\r\n\r\nimport {CounterExampleProps} from '../AppTypes/AppTypes'\r\nimport '../App.scss';\r\n\r\nconst CounterExample: React.FC<CounterExampleProps> = ({ initialValue = 0 }: CounterExampleProps): JSX.Element => {\r\n    const [counter, setCounter] = useState<number>(initialValue);\r\n    const { name, setName } = useContext<UserType>(UserContext);\r\n\r\n    const handleName = (n: string) => {\r\n        if (setName)\r\n            setName(n);\r\n    }\r\n\r\n    const handleIncrement = useCallback(() => {\r\n        setCounter((prev: number) => prev + 1);\r\n        // Dependency removed!\r\n    }, []);\r\n\r\n    const handleDelayedIncrement = useCallback(() => {\r\n        // Using prev state helps us to avoid unexpected behaviour\r\n        setTimeout(() => setCounter((prev: number) => prev + 1), 1000);\r\n        // Dependency removed!\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h2>{`Counter is ${counter}`}</h2>\r\n            <h2>{`Context: -> Name is ${name}`}</h2>\r\n            <span className='button-space'>\r\n                <Button variant=\"outlined\" onClick={handleIncrement}>Instant increment</Button>\r\n            </span>\r\n\r\n            <span className='button-space'>\r\n                <Button variant=\"contained\" onClick={handleDelayedIncrement}>Delayed increment</Button>\r\n            </span>\r\n\r\n            <span className='button-space'>\r\n                <Button variant=\"outlined\" onClick={() => handleName(`${name}${counter}`)}>Name Change</Button>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\nexport default CounterExample;"],"names":["_ref","_ref$initialValue","initialValue","_useState","useState","_useState2","_slicedToArray","counter","setCounter","_useContext","useContext","UserContext","name","setName","handleIncrement","useCallback","prev","handleDelayedIncrement","setTimeout","_jsxs","children","_jsx","concat","className","Button","variant","onClick","n"],"sourceRoot":""}