{"version":3,"file":"static/js/403.627a9ba9.chunk.js","mappings":"mPAIaA,EAAI,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAKf,SAAAA,EAAYK,GAAa,IAADC,EAGG,OAHHC,EAAAA,EAAAA,GAAA,KAAAP,IACtBM,EAAAH,EAAAK,KAAA,KAAMH,IAJAI,aAAO,EAAAH,EACPI,WAA+B,KAIrCJ,EAAKK,MAAQ,CAAEC,SAAU,GAAIC,aAAc,IAC3CP,EAAKG,aAAUK,EAAUR,CAC3B,CA0DC,OA1DAS,EAAAA,EAAAA,GAAAf,EAAA,EAAAgB,IAAA,uBAAAC,MACD,WAAwB,IAADC,EACrBC,cAAcC,KAAKX,SACJ,QAAfS,EAAAE,KAAKV,kBAAU,IAAAQ,GAAfA,EAAiBG,OACnB,GAAC,CAAAL,IAAA,oBAAAC,MACD,WAAqB,IAADK,EAAA,KAGlBF,KAAKV,WAAa,IAAIa,UAAU,wBAChCH,KAAKV,WAAWc,OAAS,kBAAMC,QAAQC,IAAI,YAAa,EACxDN,KAAKV,WAAWiB,QAAU,kBAAMF,QAAQC,IAAI,YAAa,EAIzDN,KAAKV,WAAWkB,UAAY,SAAAC,GAC1BJ,QAAQC,IAAIG,GAGZP,EAAKQ,SAAS,CACZlB,SAAUU,EAAKX,MAAMC,SAASmB,OAAO,CAACF,EAAIG,OAAOC,OAAO,IAE5D,EAGAb,KAAKX,QAAUyB,aAAY,WAAO,IAADC,EACzBC,EAAoBC,KAAKC,SAChB,QAAfH,EAAAb,EAAKZ,kBAAU,IAAAyB,GAAfA,EAAiBI,KAAK,GAADR,OAAIK,IACzBd,EAAKQ,SAAS,CACZjB,aAAcS,EAAKX,MAAME,aAAakB,OAAO,CAAC,GAADA,OAAIK,KAAcH,OAAO,IAG1E,GAAG,IACL,GAAC,CAAAjB,IAAA,SAAAC,MAKD,WACE,OAAOuB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACLC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKF,UAClBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,SAAQF,UACrBD,EAAAA,EAAAA,MAAA,OAAKG,UAAU,qBAAqBC,MAAO,CAAEC,QAAS,OAAQC,OAAQ,OAAQC,gBAAiB,YAAcN,SAAA,CAAC,KAACC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,iBAAqB,IAAErB,KAAKf,MAAM2C,cAG7JN,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKF,UAClBD,EAAAA,EAAAA,MAAA,OAAKG,UAAU,SAAQF,SAAA,EACrBD,EAAAA,EAAAA,MAAA,OAAKG,UAAU,sDAAqDF,SAAA,EAClEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAMrB,KAAKT,MAAME,aAAaoB,OAAO,GAAGgB,KAAI,SAACC,EAAKC,GAAG,OAAKT,EAAAA,EAAAA,KAAA,MAAAD,SAA4BS,GAAnB,WAAaC,EAAe,UAEjGX,EAAAA,EAAAA,MAAA,OAAKG,UAAU,0DAAyDF,SAAA,EACtEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAMrB,KAAKT,MAAMC,SAASqB,OAAO,GAAGgB,KAAI,SAACC,EAAKC,GAAG,OAAKT,EAAAA,EAAAA,KAAA,MAAAD,SAAwBS,EAAIE,UAAU,EAAG,KAAhC,OAASD,EAAgC,gBAMlH,KAACnD,CAAA,CAnEc,CAASqD,EAAAA,WA8E1B,OAAeC,EAAAA,EAAAA,KATf,SAAyB3C,GAIvB,OAHAc,QAAQC,IAAIf,GAGL,CACLqC,MAHYrC,EAAM4C,KAAKP,MAIvBQ,SAHe7C,EAAM4C,KAAKC,SAK9B,GACA,CAAwCxD,E","sources":["Echo/Echo.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport './Echo.scss';\r\n\r\nexport class Echo extends React.Component<any, { messages: string[], sentMessages: string[] }> {\r\n\r\n  private timerid: NodeJS.Timeout | undefined;  // stops a warning in DidMount\r\n  private connection: WebSocket | null = null;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { messages: [], sentMessages: [] }\r\n    this.timerid = undefined;\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerid);\r\n    this.connection?.close();\r\n  }\r\n  componentDidMount() {\r\n    // this is an \"echo\" websocket service\r\n    /// Please set up a local web socket server from this page: https://www.lob.com/blog/websocket-org-is-down-here-is-an-alternative\r\n    this.connection = new WebSocket('ws://localhost:10000'); \r\n    this.connection.onopen = () => console.log(\"ws opened\");\r\n    this.connection.onclose = () => console.log(\"ws closed\");\r\n\r\n    // listen to onmessage event\r\n\r\n    this.connection.onmessage = evt => {\r\n      console.log(evt);\r\n\r\n      // add the new message to state\r\n      this.setState({\r\n        messages: this.state.messages.concat([evt.data]).slice(-5)\r\n      })\r\n    };\r\n\r\n    // for testing purposes: sending to the echo service which will send it back back\r\n    this.timerid = setInterval(() => {\r\n      const randomNum: number = Math.random();\r\n      this.connection?.send(`${randomNum}`);\r\n      this.setState({\r\n        sentMessages: this.state.sentMessages.concat([`${randomNum}`]).slice(-5)\r\n      })\r\n\r\n    }, 2000)\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return <div>\r\n      <div className='row'>\r\n        <div className='col-12'>\r\n          <div className='curved-edges w-100' style={{ padding: '10px', margin: '10px', backgroundColor: 'lavender', }}> <strong>Redux total:</strong> {this.props.total}</div>\r\n        </div>\r\n      </div>\r\n      <div className='row'>\r\n        <div className='col-12'>\r\n          <div className='echo curved-edges echo__section echo__section--sent'>\r\n            <h2>Sent</h2>\r\n            <ol >{this.state.sentMessages.slice(-5).map((msg, idx) => <li key={'sentmsg-' + idx}>{msg}</li>)}</ol>\r\n          </div>\r\n          <div className='echo curved-edges echo__section echo__section--received'>\r\n            <h2>Received</h2>\r\n            <ol >{this.state.messages.slice(-5).map((msg, idx) => <li key={'msg-' + idx}>{msg.substring(0, 30)}</li>)}</ol>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n      ;\r\n  }\r\n};\r\nfunction mapStateToProps(state: { calc: { total: number, articles: string[] } }) {\r\n  console.log(state)\r\n  const total = state.calc.total;\r\n  const articles = state.calc.articles;;\r\n  return {\r\n    total,\r\n    articles,\r\n  };\r\n}\r\nexport default connect(mapStateToProps)(Echo);\r\n"],"names":["Echo","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","timerid","connection","state","messages","sentMessages","undefined","_createClass","key","value","_this$connection","clearInterval","this","close","_this2","WebSocket","onopen","console","log","onclose","onmessage","evt","setState","concat","data","slice","setInterval","_this2$connection","randomNum","Math","random","send","_jsxs","children","_jsx","className","style","padding","margin","backgroundColor","total","map","msg","idx","substring","React","connect","calc","articles"],"sourceRoot":""}