{"version":3,"file":"static/js/711.96473043.chunk.js","mappings":"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","sources":["AgGridDemo/MoodRenderer.tsx","AgGridDemo/AgGridDemo.tsx","CustomHooks/useWindowSize.tsx"],"sourcesContent":["import  {\r\n    forwardRef,\r\n    useImperativeHandle,\r\n    useState,\r\n} from 'react';\r\nimport { ICellRendererParams } from 'ag-grid-community';\r\n\r\nexport default forwardRef((props: ICellRendererParams, ref) => {\r\n    const imageForMood = (make: string) =>\r\n        'https://www.ag-grid.com/example-assets/smileys/' +\r\n        (make === 'Porsche' ? 'happy.png' : 'sad.png');\r\n\r\n    const [mood, setMood] = useState(imageForMood(props.value));\r\n\r\n    useImperativeHandle(ref, () => {\r\n        return {\r\n            refresh(params: ICellRendererParams) {\r\n                setMood(imageForMood(params.value));\r\n            },\r\n        };\r\n    });\r\n\r\n    return <span>{props.value}<img width=\"20px\" src={mood} style={{ paddingLeft: '5px' }} alt=\"mood\"/></span>;\r\n});","import { useCallback, useMemo, useRef, useState } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\r\nimport './AgGridDemo.scss';\r\nimport {\r\n    ColDef,\r\n    GetRowIdFunc,\r\n    GetRowIdParams,\r\n    RowSelectedEvent,\r\n    ValueFormatterParams,\r\n    ICellRendererParams,\r\n    CellRendererSelectorResult,\r\n} from 'ag-grid-community';\r\nimport { useWindowSize, Size } from '../CustomHooks/useWindowSize';\r\nimport MoodRenderer from './MoodRenderer';\r\n\r\ninterface ICar {\r\n    make: string;\r\n    model: string;\r\n    price: number;\r\n}\r\ninterface IDiscountRate {\r\n    discount: number;\r\n}\r\n\r\nconst AgGridDemo = () => {\r\n    const size: Size = useWindowSize(); // window resize hook\r\n    const gridRef = useRef<AgGridReact<ICar>>(null);\r\n    const containerStyle = useMemo(() => ({ width: '100%', height: '100%' }), []);\r\n    // Adjust height and width as window is resized.\r\n    const gridStyle = useMemo(() => ({ height: `${Math.floor(size?.height ? size?.height / 2 : 600)}px`, width: `${Math.floor(size?.width ? size?.width / 2 : 600)}px` }), [size]);\r\n    const [rowData, setRowData] = useState<ICar[]>([\r\n        { make: 'Toyota', model: 'Celica', price: 35000 },\r\n        { make: 'Ford', model: 'Mondeo', price: 32000 },\r\n        { make: 'Porsche', model: 'Boxster', price: 72000 },\r\n    ]);\r\n    const [columnDefs, setColumnDefs] = useState<ColDef[]>([\r\n        {\r\n            headerName: 'Make', field: 'make',\r\n            cellRendererSelector: (params: ICellRendererParams<ICar>): CellRendererSelectorResult | undefined => {\r\n                return {\r\n                    component: MoodRenderer,\r\n                };\r\n            },\r\n            filter: 'agSetColumnFilter'\r\n        },\r\n        { headerName: 'Model', field: 'model' },\r\n        {\r\n            headerName: 'Price',\r\n            field: 'price',\r\n            valueFormatter: (params: ValueFormatterParams<ICar, number>) => {\r\n                // params.value: number\r\n                return '$' + params.value;\r\n            },\r\n        },\r\n    ]);\r\n    const [cars, setCars] = useState<ICar[]>([]);\r\n\r\n    const context = useMemo(() => {\r\n        return {\r\n            discount: 0.9,\r\n        } as IDiscountRate;\r\n    }, []);\r\n    const getRowId = useMemo<GetRowIdFunc>(() => {\r\n        return (params: GetRowIdParams<ICar>) => {\r\n            // params.data : ICar\r\n            return params.data.make + params.data.model;\r\n        };\r\n    }, []);\r\n\r\n\r\n    const onRowSelected = useCallback(\r\n        (event: RowSelectedEvent<ICar, IDiscountRate>) => {\r\n            // event.data: ICar | undefined\r\n            if (event.data && event.node.isSelected()) {\r\n                const price = event.data.price;\r\n                // event.context: IContext\r\n                const discountRate = event.context.discount;\r\n                console.log('Price with 10% discount:', price * discountRate);\r\n            }\r\n        },\r\n        []\r\n    );\r\n\r\n    const onShowSelection = useCallback(() => {\r\n        // api.getSelectedRows() : ICar[]\r\n        const cars: ICar[] = gridRef.current!.api.getSelectedRows();\r\n        setCars(cars);\r\n        console.log(\r\n            'Selected cars are',\r\n            cars.map((c) => `${c.make} ${c.model}`)\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div style={containerStyle}>\r\n                <div className=\"test-container\">\r\n                    <div className=\"test-header\">\r\n                        <button onClick={onShowSelection}>Log Selected Cars</button>\r\n                    </div>\r\n\r\n                    <div style={gridStyle} className=\"ag-theme-alpine\">\r\n                        <AgGridReact<ICar>\r\n                            ref={gridRef}\r\n                            rowData={rowData}\r\n                            columnDefs={columnDefs}\r\n                            rowSelection={'multiple'}\r\n                            context={context}\r\n                            getRowId={getRowId}\r\n                            onRowSelected={onRowSelected}\r\n                        ></AgGridReact>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                {cars.length ?\r\n                    <>\r\n                        <h4>Selected cars are</h4>\r\n                        <ol>\r\n                            {cars.map((c, i) => <li key={`car-${i}`}>{c.make} {c.model}</li>)}\r\n                        </ol>\r\n                    </>\r\n                    :\r\n                    <></>\r\n                }\r\n\r\n            </div>\r\n        </>\r\n    );\r\n};\r\nexport default AgGridDemo;","import { useState, useEffect } from \"react\";\r\n// Define general type for useWindowSize hook, which includes width and height\r\nexport interface Size {\r\n  width: number | undefined;\r\n  height: number | undefined;\r\n}\r\n/** Usage\r\nfunction App() {\r\n  const size: Size = useWindowSize();\r\n  return (\r\n    <div>\r\n      {size.width}px / {size.height}px\r\n    </div>\r\n  );\r\n}\r\n**/\r\n// Hook\r\nexport function useWindowSize(): Size {\r\n  // Initialize state with undefined width/height so server and client renders match\r\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n  const [windowSize, setWindowSize] = useState<Size>({\r\n    width: undefined,\r\n    height: undefined,\r\n  });\r\n  useEffect(() => {\r\n    // Handler to call on window resize\r\n    function handleResize() {\r\n      // Set window width/height to state\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    }\r\n    // Add event listener\r\n    window.addEventListener(\"resize\", handleResize);\r\n    // Call handler right away so state gets updated with initial window size\r\n    handleResize();\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []); // Empty array ensures that effect is only run on mount\r\n  return windowSize;\r\n}\r\n"],"names":["forwardRef","props","ref","imageForMood","make","_useState","useState","value","_useState2","_slicedToArray","mood","setMood","useImperativeHandle","refresh","params","_jsxs","children","_jsx","width","src","style","paddingLeft","alt","size","undefined","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","gridRef","useRef","containerStyle","useMemo","gridStyle","concat","Math","floor","model","price","rowData","_useState3","headerName","field","cellRendererSelector","component","MoodRenderer","filter","valueFormatter","_useState4","columnDefs","_useState5","_useState6","cars","setCars","context","discount","getRowId","data","onRowSelected","useCallback","event","node","isSelected","discountRate","console","log","onShowSelection","current","api","getSelectedRows","map","c","_Fragment","className","onClick","AgGridReact","rowSelection","length","i"],"sourceRoot":""}